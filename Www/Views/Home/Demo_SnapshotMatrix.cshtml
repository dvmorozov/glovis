@model ViewChartSet

@using System.Globalization
@using web.Models;

@{
    var l1 = (List<ViewChartSetsCharts>)ViewBag.ChartSetsCharts;
}

@{
	//	Отображение матрицы, показывающей посл-ти снапшотов.
    for (Int32 row = 0; row < Model.Rows; row++)
    {
        for (Int32 col = 0; col < Model.Cols; col++)
        {
            for (Int32 i = 0; i < l1.Count(); i++)
            {
                ViewChartSetsCharts item = l1[i];
                if (item.ColIndex == col && item.RowIndex == row)
                {
                    String s = Url.Action("RenderSrc", "Home", new { id = item.ChartID, width = Model.CellWidth, height = Model.CellHeight });
                    @Html.Raw(
                        "<script language=\"javascript\" type=\"text/javascript\">" +
                        "    $(function () {" +
                        "        update_" + item.ChartID.ToString(CultureInfo.InvariantCulture) + "();" +
                        "    });" +
                        "    function update_" + item.ChartID.ToString(CultureInfo.InvariantCulture) + "() {;" +
                        "        $.ajax({" +
                        "            url: '" + s + "'," +
                        "            method: \"GET\"," +
                        "            dataType: \"text\"," +
                        "            cache: false," +
                        "            timeout: 10000," +
                        "            success: function (responseXML) {" +
                        "                if (undefined == responseXML)" +
                        "                    return;" +
                        "                document.getElementById('div_chart_" + item.ChartID.ToString(CultureInfo.InvariantCulture) + "').setAttribute('src', responseXML);" +
                        "            }," +
                        "            error: function (xmlHttp, textStatus, errorThrown) { }," +
                        "            complete: function () {" +
                        "                setTimeout(function () {" +
                        "                    update_" + item.ChartID.ToString(CultureInfo.InvariantCulture) + "();" +
                        "                }, 1000);" +
                        "            }" +
                        "        });" +
                        "    };" +
                        "</script>")
                    break;
                }
            }
        }
    }
}

<table style="text-align:center;">
    @{
        var l = (List<ViewChartSetsCharts>)ViewBag.ChartSetsCharts;

        for (Int32 row = 0; row < Model.Rows; row++)
        { 
            <tr>
                @for (Int32 col = 0; col < Model.Cols; col++)
                {
                    //  search of appropriate chart
                    Boolean found = false;
                    for (Int32 i = 0; i < l.Count(); i++)
                    {
                        ViewChartSetsCharts item = l[i];
                        if (item.ColIndex == col && item.RowIndex == row)
                        { 
                            <td style="@Html.Raw("border: 0 hidden; padding:" + Model.Margin.ToString(CultureInfo.InvariantCulture) + "px;")">
                                @{
                                    ViewBag.ChartID = item.ChartID;
                                    ViewBag.Width = Model.CellWidth;
                                    ViewBag.Height = Model.CellHeight;
                                    @Html.Partial("DivChart", new {item.ChartID, Width = Model.CellWidth, Height = Model.CellHeight })
                                    /*data are translated through ViewData!*/
                                }
                            </td>
                            found = true;
                            break;
                        }
                    }

                    if (!found)
                    { 
                        <td style=@Html.Raw("\"border: 0 hidden; padding:" + Model.Margin.ToString(CultureInfo.InvariantCulture) + "px;\"")>
                        </td>
                    }
                }
            </tr>
        }
    }
</table>
