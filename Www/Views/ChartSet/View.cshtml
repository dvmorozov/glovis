@model ViewChartSet

@{
	ViewBag.Title = Model.Name;
	Layout = "~/Views/Shared/_LayoutRepresentation.cshtml";
}

@using System.Globalization
@using web.Models;

<h2>@Model.Name</h2>

<p>
	@Html.ActionLink("Matrices", "Index") |
	@Html.ActionLink("Edit", "Edit", new { id=Model.ID }) |
	@Html.ActionLink("Screens", "Index", "ChartSetCharts", new { id = Model.ID }, null)
</p>

@{
	@*
	var l1 = (List<ViewChartSetsCharts>)ViewBag.ChartSetsCharts;
	for (Int32 row = 0; row < Model.Rows; row++)
	{
		for (Int32 col = 0; col < Model.Cols; col++)
		{
			for (Int32 i = 0; i < l1.Count(); i++)
			{
				ViewChartSetsCharts item = l1[i];
				if (item.ColIndex == col && item.RowIndex == row)
				{
					String s = Url.Action("UpdateWh", "Chart", new { id = item.ChartID, width = Model.CellWidth, height = Model.CellHeight });
					@Html.Raw(
						"<script language=\"javascript\" type=\"text/javascript\">" +
						"    $(function () {" +
						"        update_" + item.ChartID.ToString(CultureInfo.InvariantCulture) + "();" +
						"    });" +
						"    function update_" + item.ChartID.ToString(CultureInfo.InvariantCulture) + "() {;" +
						"        $.ajax({" +
						"            url: '" + s + "'," +
						"            method: \"GET\"," +
						"            dataType: \"text\"," +
						"            cache: false," +
						"            timeout: 10000," +
						"            success: function (responseXML) {" +
						"                if (undefined == responseXML)" +
						"                    return;" +
						"                document.getElementById('div_chart_" + item.ChartID.ToString(CultureInfo.InvariantCulture) + "').setAttribute('src', responseXML);" +
						"            }," +
						"            error: function (xmlHttp, textStatus, errorThrown) { }," +
						"            complete: function () {" +
						"                setTimeout(function () {" +
						"                    update_" + item.ChartID.ToString(CultureInfo.InvariantCulture) + "();" +
						"                }, 5000);" +
						"            }" +
						"        });" +
						"    };" +
						"</script>")
					break;
				}
			}
		}
	}
	*@
}

<fieldset>
	<legend>@Model.Name</legend>
	<table>
		@{
			var l = (List<ViewChartSetsChartsExt>)ViewBag.ChartSetsCharts;

			for (var row = 0; row < Model.Rows; row++)
			{ 
				<tr>
					@for (var col = 0; col < Model.Cols; col++)
					{
						//  search of appropriate chart
						var found = false;
						for (var i = 0; i < l.Count(); i++)
						{
							var item = l[i];
							if (item.ColIndex != col || item.RowIndex != row)
							{
								continue;
							}

							<td style="@Html.Raw("border: 0 hidden; padding:" + Model.Margin.ToString(CultureInfo.InvariantCulture) + "px;")">
								<p>
									@Html.ActionLink("Edit", "Edit", "Chart", new { id = item.ChartID }, null) <!-- | -->
									@*Html.ActionLink("XLSX", "XLSX", "Chart", new { id = item.ChartID }, null)*@
								</p>
								@{
									ViewBag.ChartID = item.ChartID;
									ViewBag.Width = Model.CellWidth;
									ViewBag.Height = Model.CellHeight;
									//	https://www.evernote.com/shard/s132/nl/14501366/515ae7cc-5203-4cb2-be8f-94f5e858d71f
									ViewBag.FullURL = "http://" + (item.Port.IsEmpty() ? item.URL : item.URL + ':' + item.Port);
								}
								@*ViewBag.Sourcee = Model.*@
								@Html.Partial("DivChart")
								@*data are translated through ViewData!*@
							
							</td>
							found = true;
							break;
						}

						if (found)
						{
							continue;
						}
						<td style = "@Html.Raw("border: 0 hidden; padding:" + Model.Margin.ToString(CultureInfo.InvariantCulture) + "px;")">
						</td>
					}
				</tr>
			}
		}
	</table>
</fieldset>

