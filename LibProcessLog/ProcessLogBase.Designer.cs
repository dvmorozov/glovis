//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("ProcessLogBase", "ProcessMessage", "Process", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LibProcessLog.Process), "Message", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibProcessLog.Message), true)]
[assembly: EdmRelationshipAttribute("ProcessLogBase", "ExecutableProcess", "Executable", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LibProcessLog.Executable), "Process", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibProcessLog.Process), true)]
[assembly: EdmRelationshipAttribute("ProcessLogBase", "ExecutableMessage", "Executable", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LibProcessLog.Executable), "Message", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibProcessLog.Message), true)]

#endregion

namespace LibProcessLog
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ProcessLogBaseContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ProcessLogBaseContainer object using the connection string found in the 'ProcessLogBaseContainer' section of the application configuration file.
        /// </summary>
        public ProcessLogBaseContainer() : base("name=ProcessLogBaseContainer", "ProcessLogBaseContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ProcessLogBaseContainer object.
        /// </summary>
        public ProcessLogBaseContainer(string connectionString) : base(connectionString, "ProcessLogBaseContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ProcessLogBaseContainer object.
        /// </summary>
        public ProcessLogBaseContainer(EntityConnection connection) : base(connection, "ProcessLogBaseContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Process> ProcessSet
        {
            get
            {
                if ((_ProcessSet == null))
                {
                    _ProcessSet = base.CreateObjectSet<Process>("ProcessSet");
                }
                return _ProcessSet;
            }
        }
        private ObjectSet<Process> _ProcessSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Message> MessageSet
        {
            get
            {
                if ((_MessageSet == null))
                {
                    _MessageSet = base.CreateObjectSet<Message>("MessageSet");
                }
                return _MessageSet;
            }
        }
        private ObjectSet<Message> _MessageSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Executable> ExecutableSet
        {
            get
            {
                if ((_ExecutableSet == null))
                {
                    _ExecutableSet = base.CreateObjectSet<Executable>("ExecutableSet");
                }
                return _ExecutableSet;
            }
        }
        private ObjectSet<Executable> _ExecutableSet;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProcessSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProcessSet(Process process)
        {
            base.AddObject("ProcessSet", process);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MessageSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMessageSet(Message message)
        {
            base.AddObject("MessageSet", message);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ExecutableSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExecutableSet(Executable executable)
        {
            base.AddObject("ExecutableSet", executable);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProcessLogBase", Name="Executable")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Executable : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Executable object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Executable CreateExecutable(global::System.Int32 id, global::System.String name)
        {
            Executable executable = new Executable();
            executable.Id = id;
            executable.Name = name;
            return executable;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProcessLogBase", "ExecutableProcess", "Process")]
        public EntityCollection<Process> Process
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Process>("ProcessLogBase.ExecutableProcess", "Process");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Process>("ProcessLogBase.ExecutableProcess", "Process", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProcessLogBase", "ExecutableMessage", "Message")]
        public EntityCollection<Message> Message
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Message>("ProcessLogBase.ExecutableMessage", "Message");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Message>("ProcessLogBase.ExecutableMessage", "Message", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProcessLogBase", Name="Message")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Message : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Message object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="text">Initial value of the Text property.</param>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        /// <param name="processId">Initial value of the ProcessId property.</param>
        /// <param name="executableId">Initial value of the ExecutableId property.</param>
        public static Message CreateMessage(global::System.Int32 id, global::System.String text, global::System.DateTime timestamp, global::System.Int32 processId, global::System.Int32 executableId)
        {
            Message message = new Message();
            message.Id = id;
            message.Text = text;
            message.Timestamp = timestamp;
            message.ProcessId = processId;
            message.ExecutableId = executableId;
            return message;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Text
        {
            get
            {
                return _Text;
            }
            set
            {
                OnTextChanging(value);
                ReportPropertyChanging("Text");
                _Text = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Text");
                OnTextChanged();
            }
        }
        private global::System.String _Text;
        partial void OnTextChanging(global::System.String value);
        partial void OnTextChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                OnTimestampChanging(value);
                ReportPropertyChanging("Timestamp");
                _Timestamp = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Timestamp");
                OnTimestampChanged();
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProcessId
        {
            get
            {
                return _ProcessId;
            }
            set
            {
                OnProcessIdChanging(value);
                ReportPropertyChanging("ProcessId");
                _ProcessId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProcessId");
                OnProcessIdChanged();
            }
        }
        private global::System.Int32 _ProcessId;
        partial void OnProcessIdChanging(global::System.Int32 value);
        partial void OnProcessIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ExecutableId
        {
            get
            {
                return _ExecutableId;
            }
            set
            {
                OnExecutableIdChanging(value);
                ReportPropertyChanging("ExecutableId");
                _ExecutableId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExecutableId");
                OnExecutableIdChanged();
            }
        }
        private global::System.Int32 _ExecutableId;
        partial void OnExecutableIdChanging(global::System.Int32 value);
        partial void OnExecutableIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProcessLogBase", "ProcessMessage", "Process")]
        public Process Process
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Process>("ProcessLogBase.ProcessMessage", "Process").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Process>("ProcessLogBase.ProcessMessage", "Process").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Process> ProcessReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Process>("ProcessLogBase.ProcessMessage", "Process");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Process>("ProcessLogBase.ProcessMessage", "Process", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProcessLogBase", "ExecutableMessage", "Executable")]
        public Executable Executable
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Executable>("ProcessLogBase.ExecutableMessage", "Executable").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Executable>("ProcessLogBase.ExecutableMessage", "Executable").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Executable> ExecutableReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Executable>("ProcessLogBase.ExecutableMessage", "Executable");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Executable>("ProcessLogBase.ExecutableMessage", "Executable", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProcessLogBase", Name="Process")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Process : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Process object.
        /// </summary>
        /// <param name="pid">Initial value of the Pid property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="cmdLine">Initial value of the CmdLine property.</param>
        /// <param name="executableId">Initial value of the ExecutableId property.</param>
        public static Process CreateProcess(global::System.Int16 pid, global::System.Int32 id, global::System.String cmdLine, global::System.Int32 executableId)
        {
            Process process = new Process();
            process.Pid = pid;
            process.Id = id;
            process.CmdLine = cmdLine;
            process.ExecutableId = executableId;
            return process;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Pid
        {
            get
            {
                return _Pid;
            }
            set
            {
                OnPidChanging(value);
                ReportPropertyChanging("Pid");
                _Pid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Pid");
                OnPidChanged();
            }
        }
        private global::System.Int16 _Pid;
        partial void OnPidChanging(global::System.Int16 value);
        partial void OnPidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CmdLine
        {
            get
            {
                return _CmdLine;
            }
            set
            {
                OnCmdLineChanging(value);
                ReportPropertyChanging("CmdLine");
                _CmdLine = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CmdLine");
                OnCmdLineChanged();
            }
        }
        private global::System.String _CmdLine;
        partial void OnCmdLineChanging(global::System.String value);
        partial void OnCmdLineChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ExecutableId
        {
            get
            {
                return _ExecutableId;
            }
            set
            {
                OnExecutableIdChanging(value);
                ReportPropertyChanging("ExecutableId");
                _ExecutableId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExecutableId");
                OnExecutableIdChanged();
            }
        }
        private global::System.Int32 _ExecutableId;
        partial void OnExecutableIdChanging(global::System.Int32 value);
        partial void OnExecutableIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProcessLogBase", "ProcessMessage", "Message")]
        public EntityCollection<Message> Message
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Message>("ProcessLogBase.ProcessMessage", "Message");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Message>("ProcessLogBase.ProcessMessage", "Message", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProcessLogBase", "ExecutableProcess", "Executable")]
        public Executable Executable
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Executable>("ProcessLogBase.ExecutableProcess", "Executable").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Executable>("ProcessLogBase.ExecutableProcess", "Executable").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Executable> ExecutableReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Executable>("ProcessLogBase.ExecutableProcess", "Executable");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Executable>("ProcessLogBase.ExecutableProcess", "Executable", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
