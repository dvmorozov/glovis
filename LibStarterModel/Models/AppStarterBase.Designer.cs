//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("AppStarterBaseModel", "TableTaskTableMonitoringLog", "TableTask", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LibStarterModel.Models.TableTask), "TableMonitoringLog", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibStarterModel.Models.TableMonitoringLog), true)]
[assembly: EdmRelationshipAttribute("AppStarterBaseModel", "TableTaskTableTaskOperation", "TableTask", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LibStarterModel.Models.TableTask), "TableTaskOperation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LibStarterModel.Models.TableTaskOperation), true)]

#endregion

namespace LibStarterModel.Models
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class AppStarterBaseEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект AppStarterBaseEntities, используя строку соединения из раздела "AppStarterBaseEntities" файла конфигурации приложения.
        /// </summary>
        public AppStarterBaseEntities() : base("name=AppStarterBaseEntities", "AppStarterBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта AppStarterBaseEntities.
        /// </summary>
        public AppStarterBaseEntities(string connectionString) : base(connectionString, "AppStarterBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта AppStarterBaseEntities.
        /// </summary>
        public AppStarterBaseEntities(EntityConnection connection) : base(connection, "AppStarterBaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TableTask> TableTask
        {
            get
            {
                if ((_TableTask == null))
                {
                    _TableTask = base.CreateObjectSet<TableTask>("TableTask");
                }
                return _TableTask;
            }
        }
        private ObjectSet<TableTask> _TableTask;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TableExe> TableExe
        {
            get
            {
                if ((_TableExe == null))
                {
                    _TableExe = base.CreateObjectSet<TableExe>("TableExe");
                }
                return _TableExe;
            }
        }
        private ObjectSet<TableExe> _TableExe;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TableMonitoringLog> TableMonitoringLog
        {
            get
            {
                if ((_TableMonitoringLog == null))
                {
                    _TableMonitoringLog = base.CreateObjectSet<TableMonitoringLog>("TableMonitoringLog");
                }
                return _TableMonitoringLog;
            }
        }
        private ObjectSet<TableMonitoringLog> _TableMonitoringLog;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TableTaskOperation> TableTaskOperationSet
        {
            get
            {
                if ((_TableTaskOperationSet == null))
                {
                    _TableTaskOperationSet = base.CreateObjectSet<TableTaskOperation>("TableTaskOperationSet");
                }
                return _TableTaskOperationSet;
            }
        }
        private ObjectSet<TableTaskOperation> _TableTaskOperationSet;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TableTask. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTableTask(TableTask tableTask)
        {
            base.AddObject("TableTask", tableTask);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TableExe. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTableExe(TableExe tableExe)
        {
            base.AddObject("TableExe", tableExe);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TableMonitoringLog. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTableMonitoringLog(TableMonitoringLog tableMonitoringLog)
        {
            base.AddObject("TableMonitoringLog", tableMonitoringLog);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TableTaskOperationSet. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTableTaskOperationSet(TableTaskOperation tableTaskOperation)
        {
            base.AddObject("TableTaskOperationSet", tableTaskOperation);
        }

        #endregion

        #region Импортируемые функции
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="task">Нет доступной документации по метаданным.</param>
        /// <param name="timeStamp">Нет доступной документации по метаданным.</param>
        /// <param name="reason">Нет доступной документации по метаданным.</param>
        public int AddMonitoringLog(Nullable<global::System.Guid> task, Nullable<global::System.DateTimeOffset> timeStamp, global::System.String reason)
        {
            ObjectParameter taskParameter;
            if (task.HasValue)
            {
                taskParameter = new ObjectParameter("Task", task);
            }
            else
            {
                taskParameter = new ObjectParameter("Task", typeof(global::System.Guid));
            }
    
            ObjectParameter timeStampParameter;
            if (timeStamp.HasValue)
            {
                timeStampParameter = new ObjectParameter("TimeStamp", timeStamp);
            }
            else
            {
                timeStampParameter = new ObjectParameter("TimeStamp", typeof(global::System.DateTimeOffset));
            }
    
            ObjectParameter reasonParameter;
            if (reason != null)
            {
                reasonParameter = new ObjectParameter("Reason", reason);
            }
            else
            {
                reasonParameter = new ObjectParameter("Reason", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("AddMonitoringLog", taskParameter, timeStampParameter, reasonParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="operationID">Нет доступной документации по метаданным.</param>
        /// <param name="finishedSuccessfully">Нет доступной документации по метаданным.</param>
        public int UpdateDeviceStatusByOperation(Nullable<global::System.Guid> operationID, Nullable<global::System.Boolean> finishedSuccessfully)
        {
            ObjectParameter operationIDParameter;
            if (operationID.HasValue)
            {
                operationIDParameter = new ObjectParameter("OperationID", operationID);
            }
            else
            {
                operationIDParameter = new ObjectParameter("OperationID", typeof(global::System.Guid));
            }
    
            ObjectParameter finishedSuccessfullyParameter;
            if (finishedSuccessfully.HasValue)
            {
                finishedSuccessfullyParameter = new ObjectParameter("FinishedSuccessfully", finishedSuccessfully);
            }
            else
            {
                finishedSuccessfullyParameter = new ObjectParameter("FinishedSuccessfully", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("UpdateDeviceStatusByOperation", operationIDParameter, finishedSuccessfullyParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="taskID">Нет доступной документации по метаданным.</param>
        /// <param name="process">Нет доступной документации по метаданным.</param>
        public int UpdateProcess(Nullable<global::System.Guid> taskID, global::System.String process)
        {
            ObjectParameter taskIDParameter;
            if (taskID.HasValue)
            {
                taskIDParameter = new ObjectParameter("TaskID", taskID);
            }
            else
            {
                taskIDParameter = new ObjectParameter("TaskID", typeof(global::System.Guid));
            }
    
            ObjectParameter processParameter;
            if (process != null)
            {
                processParameter = new ObjectParameter("Process", process);
            }
            else
            {
                processParameter = new ObjectParameter("Process", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("UpdateProcess", taskIDParameter, processParameter);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AppStarterBaseModel", Name="TableExe")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TableExe : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TableExe.
        /// </summary>
        /// <param name="exeName">Исходное значение свойства ExeName.</param>
        /// <param name="fullExeName">Исходное значение свойства FullExeName.</param>
        public static TableExe CreateTableExe(global::System.String exeName, global::System.String fullExeName)
        {
            TableExe tableExe = new TableExe();
            tableExe.ExeName = exeName;
            tableExe.FullExeName = fullExeName;
            return tableExe;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ExeName
        {
            get
            {
                return _ExeName;
            }
            set
            {
                if (_ExeName != value)
                {
                    OnExeNameChanging(value);
                    ReportPropertyChanging("ExeName");
                    _ExeName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ExeName");
                    OnExeNameChanged();
                }
            }
        }
        private global::System.String _ExeName;
        partial void OnExeNameChanging(global::System.String value);
        partial void OnExeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FullExeName
        {
            get
            {
                return _FullExeName;
            }
            set
            {
                OnFullExeNameChanging(value);
                ReportPropertyChanging("FullExeName");
                _FullExeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FullExeName");
                OnFullExeNameChanged();
            }
        }
        private global::System.String _FullExeName;
        partial void OnFullExeNameChanging(global::System.String value);
        partial void OnFullExeNameChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AppStarterBaseModel", Name="TableMonitoringLog")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TableMonitoringLog : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TableMonitoringLog.
        /// </summary>
        /// <param name="timeStamp">Исходное значение свойства TimeStamp.</param>
        /// <param name="reason">Исходное значение свойства Reason.</param>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="tableTaskTaskID">Исходное значение свойства TableTaskTaskID.</param>
        /// <param name="tableTaskID">Исходное значение свойства TableTaskID.</param>
        public static TableMonitoringLog CreateTableMonitoringLog(global::System.DateTimeOffset timeStamp, global::System.String reason, global::System.Int64 id, global::System.Guid tableTaskTaskID, global::System.Int64 tableTaskID)
        {
            TableMonitoringLog tableMonitoringLog = new TableMonitoringLog();
            tableMonitoringLog.TimeStamp = timeStamp;
            tableMonitoringLog.Reason = reason;
            tableMonitoringLog.ID = id;
            tableMonitoringLog.TableTaskTaskID = tableTaskTaskID;
            tableMonitoringLog.TableTaskID = tableTaskID;
            return tableMonitoringLog;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTimeOffset TimeStamp
        {
            get
            {
                return _TimeStamp;
            }
            set
            {
                OnTimeStampChanging(value);
                ReportPropertyChanging("TimeStamp");
                _TimeStamp = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeStamp");
                OnTimeStampChanged();
            }
        }
        private global::System.DateTimeOffset _TimeStamp;
        partial void OnTimeStampChanging(global::System.DateTimeOffset value);
        partial void OnTimeStampChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Reason
        {
            get
            {
                return _Reason;
            }
            set
            {
                OnReasonChanging(value);
                ReportPropertyChanging("Reason");
                _Reason = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Reason");
                OnReasonChanged();
            }
        }
        private global::System.String _Reason;
        partial void OnReasonChanging(global::System.String value);
        partial void OnReasonChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid TableTaskTaskID
        {
            get
            {
                return _TableTaskTaskID;
            }
            set
            {
                OnTableTaskTaskIDChanging(value);
                ReportPropertyChanging("TableTaskTaskID");
                _TableTaskTaskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TableTaskTaskID");
                OnTableTaskTaskIDChanged();
            }
        }
        private global::System.Guid _TableTaskTaskID;
        partial void OnTableTaskTaskIDChanging(global::System.Guid value);
        partial void OnTableTaskTaskIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 TableTaskID
        {
            get
            {
                return _TableTaskID;
            }
            set
            {
                OnTableTaskIDChanging(value);
                ReportPropertyChanging("TableTaskID");
                _TableTaskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TableTaskID");
                OnTableTaskIDChanged();
            }
        }
        private global::System.Int64 _TableTaskID;
        partial void OnTableTaskIDChanging(global::System.Int64 value);
        partial void OnTableTaskIDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AppStarterBaseModel", "TableTaskTableMonitoringLog", "TableTask")]
        public TableTask TableTask
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableTask>("AppStarterBaseModel.TableTaskTableMonitoringLog", "TableTask").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableTask>("AppStarterBaseModel.TableTaskTableMonitoringLog", "TableTask").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TableTask> TableTaskReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableTask>("AppStarterBaseModel.TableTaskTableMonitoringLog", "TableTask");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TableTask>("AppStarterBaseModel.TableTaskTableMonitoringLog", "TableTask", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AppStarterBaseModel", Name="TableTask")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TableTask : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TableTask.
        /// </summary>
        /// <param name="taskID">Исходное значение свойства TaskID.</param>
        /// <param name="config">Исходное значение свойства Config.</param>
        /// <param name="template">Исходное значение свойства Template.</param>
        /// <param name="process">Исходное значение свойства Process.</param>
        /// <param name="running">Исходное значение свойства Running.</param>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static TableTask CreateTableTask(global::System.Guid taskID, global::System.String config, global::System.String template, global::System.String process, global::System.Boolean running, global::System.Int64 id)
        {
            TableTask tableTask = new TableTask();
            tableTask.TaskID = taskID;
            tableTask.Config = config;
            tableTask.Template = template;
            tableTask.Process = process;
            tableTask.Running = running;
            tableTask.ID = id;
            return tableTask;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid TaskID
        {
            get
            {
                return _TaskID;
            }
            set
            {
                if (_TaskID != value)
                {
                    OnTaskIDChanging(value);
                    ReportPropertyChanging("TaskID");
                    _TaskID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TaskID");
                    OnTaskIDChanged();
                }
            }
        }
        private global::System.Guid _TaskID;
        partial void OnTaskIDChanging(global::System.Guid value);
        partial void OnTaskIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Config
        {
            get
            {
                return _Config;
            }
            set
            {
                OnConfigChanging(value);
                ReportPropertyChanging("Config");
                _Config = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Config");
                OnConfigChanged();
            }
        }
        private global::System.String _Config;
        partial void OnConfigChanging(global::System.String value);
        partial void OnConfigChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Template
        {
            get
            {
                return _Template;
            }
            set
            {
                OnTemplateChanging(value);
                ReportPropertyChanging("Template");
                _Template = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Template");
                OnTemplateChanged();
            }
        }
        private global::System.String _Template;
        partial void OnTemplateChanging(global::System.String value);
        partial void OnTemplateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Process
        {
            get
            {
                return _Process;
            }
            set
            {
                OnProcessChanging(value);
                ReportPropertyChanging("Process");
                _Process = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Process");
                OnProcessChanged();
            }
        }
        private global::System.String _Process;
        partial void OnProcessChanging(global::System.String value);
        partial void OnProcessChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Running
        {
            get
            {
                return _Running;
            }
            set
            {
                OnRunningChanging(value);
                ReportPropertyChanging("Running");
                _Running = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Running");
                OnRunningChanged();
            }
        }
        private global::System.Boolean _Running;
        partial void OnRunningChanging(global::System.Boolean value);
        partial void OnRunningChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AppStarterBaseModel", "TableTaskTableMonitoringLog", "TableMonitoringLog")]
        public EntityCollection<TableMonitoringLog> TableMonitoringLog
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TableMonitoringLog>("AppStarterBaseModel.TableTaskTableMonitoringLog", "TableMonitoringLog");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TableMonitoringLog>("AppStarterBaseModel.TableTaskTableMonitoringLog", "TableMonitoringLog", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AppStarterBaseModel", "TableTaskTableTaskOperation", "TableTaskOperation")]
        public EntityCollection<TableTaskOperation> TableTaskOperation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TableTaskOperation>("AppStarterBaseModel.TableTaskTableTaskOperation", "TableTaskOperation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TableTaskOperation>("AppStarterBaseModel.TableTaskTableTaskOperation", "TableTaskOperation", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AppStarterBaseModel", Name="TableTaskOperation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TableTaskOperation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TableTaskOperation.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="operationID">Исходное значение свойства OperationID.</param>
        /// <param name="tableTaskTaskID">Исходное значение свойства TableTaskTaskID.</param>
        /// <param name="tableTaskID">Исходное значение свойства TableTaskID.</param>
        public static TableTaskOperation CreateTableTaskOperation(global::System.Int64 id, global::System.Guid operationID, global::System.Guid tableTaskTaskID, global::System.Int64 tableTaskID)
        {
            TableTaskOperation tableTaskOperation = new TableTaskOperation();
            tableTaskOperation.Id = id;
            tableTaskOperation.OperationID = operationID;
            tableTaskOperation.TableTaskTaskID = tableTaskTaskID;
            tableTaskOperation.TableTaskID = tableTaskID;
            return tableTaskOperation;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean OperationInProgress
        {
            get
            {
                return _OperationInProgress;
            }
            set
            {
                OnOperationInProgressChanging(value);
                ReportPropertyChanging("OperationInProgress");
                _OperationInProgress = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OperationInProgress");
                OnOperationInProgressChanged();
            }
        }
        private global::System.Boolean _OperationInProgress = false;
        partial void OnOperationInProgressChanging(global::System.Boolean value);
        partial void OnOperationInProgressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean FinishedSuccessfully
        {
            get
            {
                return _FinishedSuccessfully;
            }
            set
            {
                OnFinishedSuccessfullyChanging(value);
                ReportPropertyChanging("FinishedSuccessfully");
                _FinishedSuccessfully = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FinishedSuccessfully");
                OnFinishedSuccessfullyChanged();
            }
        }
        private global::System.Boolean _FinishedSuccessfully = false;
        partial void OnFinishedSuccessfullyChanging(global::System.Boolean value);
        partial void OnFinishedSuccessfullyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid OperationID
        {
            get
            {
                return _OperationID;
            }
            set
            {
                OnOperationIDChanging(value);
                ReportPropertyChanging("OperationID");
                _OperationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OperationID");
                OnOperationIDChanged();
            }
        }
        private global::System.Guid _OperationID;
        partial void OnOperationIDChanging(global::System.Guid value);
        partial void OnOperationIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid TableTaskTaskID
        {
            get
            {
                return _TableTaskTaskID;
            }
            set
            {
                OnTableTaskTaskIDChanging(value);
                ReportPropertyChanging("TableTaskTaskID");
                _TableTaskTaskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TableTaskTaskID");
                OnTableTaskTaskIDChanged();
            }
        }
        private global::System.Guid _TableTaskTaskID;
        partial void OnTableTaskTaskIDChanging(global::System.Guid value);
        partial void OnTableTaskTaskIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 TableTaskID
        {
            get
            {
                return _TableTaskID;
            }
            set
            {
                OnTableTaskIDChanging(value);
                ReportPropertyChanging("TableTaskID");
                _TableTaskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TableTaskID");
                OnTableTaskIDChanged();
            }
        }
        private global::System.Int64 _TableTaskID;
        partial void OnTableTaskIDChanging(global::System.Int64 value);
        partial void OnTableTaskIDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("AppStarterBaseModel", "TableTaskTableTaskOperation", "TableTask")]
        public TableTask TableTask
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableTask>("AppStarterBaseModel.TableTaskTableTaskOperation", "TableTask").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableTask>("AppStarterBaseModel.TableTaskTableTaskOperation", "TableTask").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TableTask> TableTaskReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TableTask>("AppStarterBaseModel.TableTaskTableTaskOperation", "TableTask");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TableTask>("AppStarterBaseModel.TableTaskTableTaskOperation", "TableTask", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
